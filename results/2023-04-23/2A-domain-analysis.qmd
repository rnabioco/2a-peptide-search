---
title: "2A domain analysis"
author: "JH"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## 2A domain analysis

```{r}
#| label: libs
library(tidyverse)
library(here)
library(janitor)
library(DT)
library(cowplot)
library(glue)
```

## Data cleaning

```{r}
#| label: data_clean
domains_c1_tbl <- read_tsv(
  here("results/2023-04-22/class-1.domain.hits.tsv.gz"),
  show_col_types = FALSE
) |>
  mutate(class = 1)

domains_c2_tbl <- read_tsv(
  here("results/2023-04-22/class-2.domain.hits.tsv.gz"),
  show_col_types = FALSE
) |>
  mutate(class = 2)

domains_tbl <- bind_rows(
  domains_c1_tbl, domains_c2_tbl
) |>
  unique() |>
  rename(record_id = `# record_id`) |>
  janitor::clean_names() |>
  mutate(
    db = case_when(
      str_detect(record_id, "^tr") ~ "uniprot",
      str_detect(record_id, "^MGY") ~ "mgnify",
      str_detect(record_id, "^UPI") ~ "uniparc",
      .default = "unknown"
    )
  ) |>
  mutate(
    db = as_factor(db),
    hit_id = as_factor(hit_id)
  ) |>
  arrange(record_id, query_start) |>
  filter(dom_evalue <= 0.01) |>
  # removes a few entries caused by cross-talk between the models
  filter(
    !(hit_id == "2A-class-2" & class == 1),
    !(hit_id == "2A-class-1" & class == 2)
  )

# fixup uniprot ids
uniprot_ids_tbl <-
  filter(domains_tbl, db == 'uniprot') |>
  rowwise() |>
  mutate(record_id = str_split(record_id, '\\|')[[1]][[3]])

domains_tbl <-
  bind_rows(
    filter(domains_tbl, db != 'uniprot'),
    uniprot_ids_tbl
  ) |> 
  unique()
```

### Load organism info

```{r}
uniparc_ids_tbl <- read_tsv(
  here("results/2023-04-23/uniparc.orgs.tsv.gz"),
  show_col_types = FALSE
) |>
  rename(record_id = From, org = Organisms) |>
  select(record_id, org) |>
  rowwise() |>
  mutate(org = str_split_i(org, ';', 1)[[1]]) |>
  mutate(db = 'uniparc')

uniprot_ids_tbl <- read_tsv(
  here("results/2023-05-22/uniprot.orgs.tsv.gz"),
  show_col_types = FALSE
) |>
  janitor::clean_names() |>
  select(record_id = entry_name, org = organism) |>
  unique() |>
  mutate(db = 'uniprot')

mgnify_ids_tbl <- read_tsv(
  here("results/2023-04-24/mgy.orgs.tsv.gz"),
  col_names = c('record_id', 'count', 'org'),
  show_col_types = FALSE
) |>
  select(record_id, org) |>
  mutate(db = 'mgnify')

org_info <- bind_rows(
  uniparc_ids_tbl,
  uniprot_ids_tbl,
  mgnify_ids_tbl
) |>
  select(db, everything()) |>
  ungroup()
```

### Remove synthetic sequences

Uniparc has a lot of sequences from synthetic sources like cloning vectors. Remove them so we can examine biological patterns.

```{r}
synthetic_uniparc_tbl <-
  filter(
    uniparc_ids_tbl,
    str_detect(org, "synthetic") |
    str_detect(org, "[Cc]loning") |
    str_detect(org, "[Vv]ector") |
    str_detect(org, "Homo sapiens") |
    str_detect(org, "unidentified") |
    is.na(org) 
  )

domains_tbl <- anti_join(
  domains_tbl,
  synthetic_uniparc_tbl,
  by = "record_id"
) |> 
  unique()
```


### 2A singletons

Uniparc and MGnify have several sequences with a single 2A domain and no other annotated domains. This could be due to:

- the sequences being truncated (Is this likely? would need to know whether stop codons are required for protein annotations)
- the domains that the 2A peptide separates are unannotated by Pfam domains (would need to expand annotations, by downloading from the relevant database)

Here are the counts of singletons. The majority of these sequences dervive from the MGnify and Uniparc databases, with relatively fewer in Uniprot, supporting the ideas above that there are annotation issues with these sequences.

```{r}
domain_cnts <-
  count(
    domains_tbl,
    record_id,
    db,
    sort = TRUE,
    name = 'n_dom'
  )
```

```{r}
filter(domain_cnts, n_dom == 1) |> count(db)
```

Let's remove the singletons for now, will clean up interpretations later.

```{r}
domains_tbl <- filter(domain_cnts, n_dom > 1) |>
  semi_join(x = domains_tbl, y = _, by = 'record_id')
```

## Domain organization

### Counts

```{r}
# calculate the number of proteins with each number of domains
protein_domain_cnts <- domain_cnts |>
  select(record_id, n_dom) |>
  mutate(
    n_dom = as_factor(n_dom),
    n_dom_lumps = fct_lump_n(
      # there happens to be a break at 13
      n_dom, 13, other_level = '>13'
    )
  ) |>
  count(n_dom_lumps)

ggplot(
  filter(
    protein_domain_cnts),
    aes(x = n_dom_lumps, y = n)
  ) +
  geom_col(fill = 'grey50') +
  theme_cowplot() +
  labs(
    x = "number of domains",
    y = "number of proteins",
    title = "Annotated Pfam domains per protein",
    subtitle = glue("total records = {scales::comma(nrow(domain_cnts))}")
  )
```

### Neighbors

The following tallies the organization of domains nearby 2A peptides. The following tabulates domains on the N-terminal and C-terminal sides of each 2A peptide.

```{r domain_org}
domain_org <- domains_tbl |>
  select(record_id, hit_id, starts_with("query"), db) |>
  arrange(record_id, query_start) |>
  mutate(
    nterm = lag(hit_id),
    # negative values are overlaps
    nterm_dist = query_start - lag(query_end),
    cterm = lead(hit_id),
    # negative values are overlaps
    cterm_dist = lead(query_start) - query_end,
    .by = record_id
  )

domain_org |>
  filter(str_detect(hit_id, "2A-class")) |>
  select(record_id, db, nterm, hit_id, cterm) |>
  count(db, nterm, hit_id, cterm, sort = TRUE) |>
  DT::datatable()
```
